!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BUFFER_SIZE	test_buffer.c	7;"	d	file:
BUF_PTR_NULL	layout.h	36;"	d
DISK_IMAGE_OFFSET	layout.h	31;"	d
DISK_OFFSET_NULL	layout.h	37;"	d
DISK_VALUE_OFFSET	layout.h	32;"	d
HASH	type.h	/^typedef int		HASH;$/;"	t
IDX_HT_TABLE_SIZE	layout.h	29;"	d
IDX_NODE	index.c	/^typedef struct IDX_NODE $/;"	s	file:
IDX_NODE	index.c	/^}IDX_NODE;$/;"	t	typeref:struct:IDX_NODE	file:
IDX_NODES_MAX	layout.h	28;"	d
IDX_NODE_NULL	layout.h	38;"	d
IDX_VALUE_INFO	index.h	/^typedef struct IDX_VALUE_INFO$/;"	s
IDX_VALUE_INFO	index.h	/^}IDX_VALUE_INFO;$/;"	t	typeref:struct:IDX_VALUE_INFO
IMAGE_FREE_IDX_NODES	layout.h	23;"	d
IMAGE_FREE_IDX_NODES_HORIZON	layout.h	24;"	d
IMAGE_HT_TABLE	layout.h	21;"	d
IMAGE_IDX_NODES	layout.h	22;"	d
IMAGE_SIZE	layout.h	26;"	d
INIT_TYPE	type.h	/^typedef int		INIT_TYPE;$/;"	t
INIT_TYPE_CREATE	type.h	/^enum init_enum {INIT_TYPE_CREATE, INIT_TYPE_LOAD};$/;"	e	enum:init_enum
INIT_TYPE_LOAD	type.h	/^enum init_enum {INIT_TYPE_CREATE, INIT_TYPE_LOAD};$/;"	e	enum:init_enum
KVS_BUFFER	buffer.h	9;"	d
KVS_INDEX	index.h	9;"	d
KVS_LAYOUT	layout.h	9;"	d
KVS_SYNC	sync.h	9;"	d
KVS_TYPE	type.h	9;"	d
OFFSET_T	type.h	/^typedef	int	 	OFFSET_T;$/;"	t
PTR_BUF	type.h	/^typedef char*		PTR_BUF;$/;"	t
PTR_KW	type.h	/^typedef int		PTR_KW;$/;"	t
VALUE_MAX_SIZE	layout.h	34;"	d
_FILE_OFFSET_BITS	sync.c	8;"	d	file:
_FILE_OFFSET_BITS	type.h	11;"	d
_LARGEFILE64_SOURCE	sync.c	10;"	d	file:
_LARGEFILE64_SOURCE	type.h	13;"	d
_LARGEFILE_SOURCE	sync.c	9;"	d	file:
_LARGEFILE_SOURCE	type.h	12;"	d
_get_free_idx_node	index.c	/^static int _get_free_idx_node()$/;"	f	file:
_is_hash_same	index.c	/^static int _is_hash_same(HASH hash_x2, HASH hash_x3, HASH hash_y2, HASH hash_y3)$/;"	f	file:
_put_free_idx_node	index.c	/^static void _put_free_idx_node(int node_id)$/;"	f	file:
buf_pool	buffer.c	/^static	PTR_BUF		buf_pool = NULL, exploit_ptr, waste_ptr, last_waste_ptr, last_ptr, last_flush_ptr;$/;"	v	file:
buf_ptr	index.h	/^	PTR_BUF		buf_ptr;$/;"	m	struct:IDX_VALUE_INFO
buf_ptr	test_buffer.c	/^	PTR_BUF buf_ptr;$/;"	m	struct:value_type	file:
buf_word	buffer.h	/^typedef struct buf_word$/;"	s
buf_word	buffer.h	/^}buf_word;$/;"	t	typeref:struct:buf_word
buffer	test_buffer.c	/^char buffer[BUFFER_SIZE];\/\/200MB$/;"	v
buffer_delete	buffer.c	/^int buffer_delete(PTR_BUF buf_value_ptr)$/;"	f
buffer_exit	buffer.c	/^int buffer_exit()$/;"	f
buffer_get	buffer.c	/^int buffer_get(PTR_BUF buf, int buf_size, PTR_BUF buf_value_ptr)$/;"	f
buffer_horizon_size	buffer.c	/^static	int		sleep_time, not_flush_size, buffer_horizon_size;$/;"	v	file:
buffer_init	buffer.c	/^int buffer_init(const char* buffer_mem, const char* buffer_log, const int buf_size, const int buffer_sleep_time, const int horizon_size)$/;"	f
buffer_lookout	buffer.c	/^static void* buffer_lookout()$/;"	f	file:
buffer_put	buffer.c	/^int buffer_put(const char* value, int value_size, PTR_BUF* buf_value_ptr, IDX_VALUE_INFO* value_info_ptr)$/;"	f
buffer_total_size	buffer.c	/^static	int		buffer_total_size;$/;"	v	file:
delete_info	test_buffer.c	/^IDX_VALUE_INFO	delete_info[10];$/;"	v
disk_offset	buffer.c	/^OFFSET_T		disk_offset;$/;"	v
disk_offset	index.h	/^	OFFSET_T	disk_offset;$/;"	m	struct:IDX_VALUE_INFO
exploit_ptr	buffer.c	/^static	PTR_BUF		buf_pool = NULL, exploit_ptr, waste_ptr, last_waste_ptr, last_ptr, last_flush_ptr;$/;"	v	file:
fd	sync.c	/^static int fd = 0;$/;"	v	file:
first_flag	buffer.c	/^static	int		first_flag, rest_space = 0;$/;"	v	file:
flush_all	buffer.c	/^void flush_all(void* arg)$/;"	f
free_idx_nodes_stack	index.c	/^static	PTR_KW*		free_idx_nodes_stack = NULL;$/;"	v	file:
free_idx_nodes_top	index.c	/^static	PTR_KW		free_idx_nodes_top;$/;"	v	file:
hash_2	index.c	/^	HASH				hash_2, hash_3;$/;"	m	struct:IDX_NODE	file:
hash_3	index.c	/^	HASH				hash_2, hash_3;$/;"	m	struct:IDX_NODE	file:
hash_func_1	index.c	/^static HASH hash_func_1(const char* key, int key_size)$/;"	f	file:
hash_func_2	index.c	/^static HASH hash_func_2(const char* key, int key_size)$/;"	f	file:
hash_func_3	index.c	/^static HASH hash_func_3(const char* key, int key_size)$/;"	f	file:
ht_table	index.c	/^static	PTR_KW*		ht_table = NULL;  $/;"	v	file:
i	test_buffer.c	/^int state, i;$/;"	v
idx_delete	index.c	/^int idx_delete(const char* key, int key_size, IDX_VALUE_INFO* delete_node)$/;"	f
idx_exit	index.c	/^int idx_exit()$/;"	f
idx_init	index.c	/^int idx_init(const char* image, const char* index_log, INIT_TYPE init_type)$/;"	f
idx_insert	index.c	/^int idx_insert(const char* key, int key_size, IDX_VALUE_INFO** insert_node_ptr)$/;"	f
idx_nodes	index.c	/^static	IDX_NODE* 	idx_nodes = NULL;$/;"	v	file:
idx_search	index.c	/^int idx_search(const char* key, int key_size, IDX_VALUE_INFO** search_node)$/;"	f
init_enum	type.h	/^enum init_enum {INIT_TYPE_CREATE, INIT_TYPE_LOAD};$/;"	g
last_flush_ptr	buffer.c	/^static	PTR_BUF		buf_pool = NULL, exploit_ptr, waste_ptr, last_waste_ptr, last_ptr, last_flush_ptr;$/;"	v	file:
last_ptr	buffer.c	/^static	PTR_BUF		buf_pool = NULL, exploit_ptr, waste_ptr, last_waste_ptr, last_ptr, last_flush_ptr;$/;"	v	file:
last_waste_ptr	buffer.c	/^static	PTR_BUF		buf_pool = NULL, exploit_ptr, waste_ptr, last_waste_ptr, last_ptr, last_flush_ptr;$/;"	v	file:
left_id	index.c	/^	PTR_KW				left_id, right_id;$/;"	m	struct:IDX_NODE	file:
log_file	buffer.c	/^static	FILE*		log_file = NULL; $/;"	v	file:
log_file	index.c	/^static	FILE*		log_file = NULL;$/;"	v	file:
log_file	sync.c	/^static FILE* log_file = NULL;$/;"	v	file:
main	test_buffer.c	/^int main()$/;"	f
mutex	buffer.c	/^static	pthread_mutex_t	mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
not_flush_size	buffer.c	/^static	int		sleep_time, not_flush_size, buffer_horizon_size;$/;"	v	file:
p_flushed	type.h	/^enum state_t { p_unavail, p_flushed, p_not_flush };$/;"	e	enum:state_t
p_not_flush	type.h	/^enum state_t { p_unavail, p_flushed, p_not_flush };$/;"	e	enum:state_t
p_unavail	type.h	/^enum state_t { p_unavail, p_flushed, p_not_flush };$/;"	e	enum:state_t
put_info	test_buffer.c	/^IDX_VALUE_INFO	put_info[10];$/;"	v
rest_space	buffer.c	/^static	int		first_flag, rest_space = 0;$/;"	v	file:
right_id	index.c	/^	PTR_KW				left_id, right_id;$/;"	m	struct:IDX_NODE	file:
sleep_time	buffer.c	/^static	int		sleep_time, not_flush_size, buffer_horizon_size;$/;"	v	file:
state	buffer.h	/^	enum state_t state;$/;"	m	struct:buf_word	typeref:enum:buf_word::state_t
state	test_buffer.c	/^int state, i;$/;"	v
state_t	type.h	/^enum state_t { p_unavail, p_flushed, p_not_flush };$/;"	g
sync_exit	sync.c	/^int sync_exit()$/;"	f
sync_flush	sync.c	/^int sync_flush()$/;"	f
sync_init	sync.c	/^int sync_init(char* pathname, int file_len, char* sync_log)$/;"	f
sync_read	sync.c	/^int sync_read(char* mem, int size, OFFSET_T disk_offset)$/;"	f
sync_write	sync.c	/^int sync_write(const char* mem, int size, OFFSET_T disk_offset)$/;"	f
tid	buffer.c	/^static	pthread_t	tid;$/;"	v	file:
value	test_buffer.c	/^	char value[1024];$/;"	m	struct:value_type	file:
value	test_buffer.c	/^char value[1024];$/;"	v
value_info	test_buffer.c	/^struct value_type value_info[10];$/;"	v	typeref:struct:value_type
value_info_ptr	buffer.h	/^	IDX_VALUE_INFO* value_info_ptr;$/;"	m	struct:buf_word
value_node	index.c	/^	IDX_VALUE_INFO			value_node;$/;"	m	struct:IDX_NODE	file:
value_ptr	test_buffer.c	/^IDX_VALUE_INFO* value_ptr = NULL;$/;"	v
value_size	index.h	/^	int		value_size;$/;"	m	struct:IDX_VALUE_INFO
value_size	test_buffer.c	/^	int value_size;$/;"	m	struct:value_type	file:
value_type	test_buffer.c	/^struct value_type {$/;"	s	file:
waste_ptr	buffer.c	/^static	PTR_BUF		buf_pool = NULL, exploit_ptr, waste_ptr, last_waste_ptr, last_ptr, last_flush_ptr;$/;"	v	file:
word_size	buffer.c	/^const	static	int	word_size = sizeof(buf_word);$/;"	v	file:
